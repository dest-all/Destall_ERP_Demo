@using Client.Web.View.Services;
@using Client.Web.View.Services.Extensions;
@using DestallMaterials.Blazor.Components.Universal.Containers;
@using DestallMaterials.Blazor.Components.Universal.Inputs;
@using MudBlazor;
@using Protocol.Models;

@typeparam TItem where TItem : IReference

@inject IReferenceClickHandler clicker

<MudItem Class="d-flex entity-search-selector">
    <SearchSelectorSingular TItem="TItem"
                            Value=Value
                            OnValueSet="OnValueSet"
                            Label="@Label"
                            MaxItemsShown="MaxItemsShown"
                            GetItemRepresentation="GetItemRepresentation"
                            GetItemsByFilter="Source"
                            Disabled=Disabled 
                            Class=@Class
                            OnClear="Clear"
                            />

    <DestallMaterials.Blazor.Components.Universal.Containers.RenderPiece Show=canNavigate @ref=navigateToContainer>
        <MudIconButton Size="MudBlazor.Size.Small"
                       Class="navigate-to-arrow"
                       Icon="@_navigateToIcon"
                       OnClick="async e => await clicker.HandleAsync(Value)" />
    </DestallMaterials.Blazor.Components.Universal.Containers.RenderPiece>    
</MudItem>


@code {
    [Parameter]
    public Func<TItem, string> GetItemRepresentation { get; set; } = item => item?.ToString();

    [Parameter]
    public int MaxItemsShown { get; set; }

    [Parameter]
    public TItem Value { get; set; }

    [Parameter]
    public Action<TItem> OnValueSet { get; set; } = i => { };

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    [EditorRequired]
    public Func<string, Task<IEnumerable<TItem>>> Source { get; set; }

    [Parameter]
    public string Class { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        canNavigate = !Value.IsEmpty();
    }

    bool canNavigate { get; set; }

    RenderPiece navigateToContainer = null;
    void Clear()
    {
        Value = default;
        canNavigate = false;
        navigateToContainer?.Refresh(false);
    }

    const string _navigateToIcon = Icons.Material.Filled.ArrowForward;
}