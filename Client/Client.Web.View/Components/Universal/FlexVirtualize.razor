@using Client.Web.View.Services;
@using DestallMaterials.Blazor.Auxiliary;
@using MudBlazor;
@typeparam T

@inject IDomAccessor _domAccessor;

<div style="@(style)" id="@_containerId" row-count="@_itemsCountInOneRaw">
    <RowsVirtualize T="T" GetItems="GetItems" GetItemsCount="GetItemsCount" Context="item" ItemsInARow="_itemsCountInOneRaw" @ref=_virt>
        @ChildContent(item)
    </RowsVirtualize>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public RenderFragment<T> ChildContent { get; set; }

    [Parameter]
    [EditorRequired]
    public Func<ItemsProviderRequest, Task<IEnumerable<T>>> GetItems { get; set; }

    [Parameter]
    [EditorRequired]
    public Func<Task<int>> GetItemsCount { get; set; }

    [Parameter]
    public string Width { get; set; } = "100%";

    [Parameter]
    [EditorRequired]
    public int ItemWidth { get; set; }

    string style => $"max-width: {Width};";

    readonly string _containerId = Guid.NewGuid().ToString();

    int _itemsCountInOneRaw = 1;

    RowsVirtualize<T> _virt;

    bool _subscribed;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (ItemWidth == default)
        {
            throw new ArgumentException();
        }

        if (!_subscribed)
        {
            _subscribed = await _domAccessor.SubscribeForResizeAsync(_containerId, async containerSize => await AdjustToContainerSizeAsync(containerSize));
        }
    }


    readonly object _locker = new object();
    bool _isResizing;
    public async Task AdjustToContainerSizeAsync(Services.Size size)
    {
        lock(_locker)
        {
            if (_isResizing)
            {
                return;
            }
            _isResizing = true;
        }
        try
        {
            //var containerSize = await _domAccessor.GetContainerSizeAsync(_containerId);
            var numberOfItemsShouldBe = Math.Max((int)Math.Floor((double)size.Width / ItemWidth), 1);

            if (numberOfItemsShouldBe != _itemsCountInOneRaw && _virt is not null)
            {
                _itemsCountInOneRaw = numberOfItemsShouldBe;
                StateHasChanged();
                await _virt.RefreshAsync();
            }
        }
        finally
        {
            _isResizing = false;   
        }
    }

    public async Task RefreshAsync()
        => await _virt.RefreshAsync();
}
