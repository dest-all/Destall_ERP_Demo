@using MudBlazor
@using Protocol.Models.Filters
@using DestallMaterials.Blazor.Components.Universal.Inputs;

<MudItem>
    <NumberInput TNumber="double" Accuracy="@Accuracy" OnValueSet="v => InnerValueLeft = v" Value="InnerValueLeft ?? 0"></NumberInput>
    <NumberInput TNumber="double" Accuracy="@Accuracy" OnValueSet="v => InnerValueRight = v" Value="InnerValueRight ?? 0"></NumberInput>
</MudItem>

@code {
    [Parameter]
    public INumberFilterReadOnlyModel Value { get; set; }

    [Parameter]
    public Action<INumberFilterReadOnlyModel> OnValueSet { get; set; } = v => { };

    [Parameter]
    public string MainLabel { get; set; }

    [Parameter]
    public ValueTuple<double, double> Limits { get; set; } = new(0, 10000);

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public byte Accuracy { get; set; } = 2;

    double? InnerValueLeft
    {
        get
        {
            return Value?.LeftLimit;
        }
        set
        {
            Value = InnerValueLeft == null ? null : new NumberFilterModel
                {
                    LeftLimit = value.Value,
                    RightLimit = Value?.RightLimit ?? Limits.Item2
                };
            if (OnValueSet != null)
            {
                OnValueSet(Value);
            }
        }
    }

    double? InnerValueRight
    {
        get
        {
            return Value?.LeftLimit;
        }
        set
        {
            Value = InnerValueLeft == null ? null : new NumberFilterModel
                {
                    RightLimit = value.Value,
                    LeftLimit = Value?.LeftLimit ?? Limits.Item1
                };
            if (OnValueSet != null)
            {
                OnValueSet(Value);
            }
        }
    }

}
