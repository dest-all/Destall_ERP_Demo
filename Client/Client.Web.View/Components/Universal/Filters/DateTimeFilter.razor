@using DestallMaterials.Blazor.Components.Universal.Inputs;
@using Protocol.Models.Filters


<MudBlazor.MudSwitch @bind-Checked="FiltersShown" Label="@MainLabel" Color="MudBlazor.Color.Info" />
@if (FiltersShown)
{
    <DateTimeInput Disabled=Disabled OnValueSet="_onValueSetLeft" InputLabel="@Labels.Item1" Value=_value?.LeftLimit />
    <DateTimeInput Disabled=Disabled OnValueSet="_onValueSetRight" InputLabel="@Labels.Item2" Value=_value?.RightLimit />
}

@code {
    [Parameter]
    public string MainLabel { get; set; }

    [Parameter]
    public ValueTuple<string, string> Labels { get; set; }

    [Parameter]
    public IDateTimeFilterReadOnlyModel Value { get; set; }

    [Parameter]
    public Action<IDateTimeFilterReadOnlyModel> OnValueSet { get; set; } = f => { };

    [Parameter]
    public bool Disabled { get; set; }

    bool FiltersShown { get; set; }

    IDateTimeFilterReadOnlyModel _value;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _value = _value ?? Value;

        FiltersShown = _value is null 
        || 
        _value.LeftLimit == DateTime.MinValue && _value.RightLimit == DateTime.MaxValue 
        || 
        _value.LeftLimit == _value.RightLimit;
    }

    void _onValueSetLeft(DateTime? dateTimeLeft)
    {
        var filter = new DateTimeFilterModel
            {
                RightLimit = _value.RightLimit,
                LeftLimit = dateTimeLeft ?? DateTime.MinValue
            };
        _value = filter;
        if (OnValueSet != null)
        {
            OnValueSet(filter);
        }
    }

    void _onValueSetRight(DateTime? dateTimeRight)
    {
        var filter = new DateTimeFilterModel
            {
                RightLimit = dateTimeRight ?? DateTime.MaxValue,
                LeftLimit = _value.LeftLimit
            };
        _value = filter;
        if (OnValueSet != null)
        {
            OnValueSet(filter);
        }
    }
}
