@using Client.Web.View.Services;
@using DestallMaterials.Blazor.Components.Universal
@using static Common.Phrases.Custom.Auth;

@inject IAccountManager account

<MudBlazor.MudExpansionPanel Text="@ChangePassword" Disabled=!CanCollapse>

    <MudBlazor.MudCard>
        <MudBlazor.MudCardContent>
            <MudBlazor.MudTextField Label="@Common.Phrases.Custom.Auth.OldPassword" @bind-Text=OldPassword T="string" />
            <MudBlazor.MudTextField Label="@Common.Phrases.Custom.Auth.NewPassword" @bind-Text=NewPassword T="string" />
        </MudBlazor.MudCardContent>

        <MudBlazor.MudCardActions Class="justify-end">
            <DynamicButton Button="Button" />
        </MudBlazor.MudCardActions>
    </MudBlazor.MudCard>

</MudBlazor.MudExpansionPanel>



@code {
    [Parameter]
    public bool CanCollapse { get; set; } = true;

    string OldPassword { get; set; }
    string NewPassword { get; set; }

    ButtonConfiguration Button;

    protected override void OnParametersSet()
    {
        base.OnInitialized();

        Button = new()
        {
            ActionName = Change,
            Color = MudBlazor.Color.Error,
            Disabled = NewPassword?.Length < 3,
            Callback = () => account.ChangePasswordAsync(OldPassword, NewPassword)
        };
    }
}
