// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("Data.Entities.DataHolders.Actors.Customer", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Data.Entities.DataHolders.Actors.Supplier", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Data.Entities.DataHolders.Employee", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<uint?>("MentorID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("MentorID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Data.Entities.DataHolders.Good", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("Data.Entities.Documents.OutcomingOrder", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("OutcomingOrders");
                });

            modelBuilder.Entity("Data.Entities.Documents.Trade.IncomingOrderLine", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("GoodID")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("IncomingOrderID")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.Property<uint>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("GoodID");

                    b.HasIndex("IncomingOrderID");

                    b.ToTable("IncomingOrderLines");
                });

            modelBuilder.Entity("Data.Entities.IncomingOrder", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<uint?>("OutcomingOrderID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("OutcomingOrderID");

                    b.ToTable("IncomingOrders");
                });

            modelBuilder.Entity("EmployeeGood", b =>
                {
                    b.Property<uint>("ResponsibleEmployeesID")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ResponsibleForGoodsID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ResponsibleEmployeesID", "ResponsibleForGoodsID");

                    b.HasIndex("ResponsibleForGoodsID");

                    b.ToTable("EmployeeGood");
                });

            modelBuilder.Entity("Data.Entities.DataHolders.Employee", b =>
                {
                    b.HasOne("Data.Entities.DataHolders.Employee", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorID");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("Data.Entities.Documents.Trade.IncomingOrderLine", b =>
                {
                    b.HasOne("Data.Entities.DataHolders.Good", "Good")
                        .WithMany()
                        .HasForeignKey("GoodID");

                    b.HasOne("Data.Entities.IncomingOrder", "IncomingOrder")
                        .WithMany("RequestedGoods")
                        .HasForeignKey("IncomingOrderID");

                    b.Navigation("Good");

                    b.Navigation("IncomingOrder");
                });

            modelBuilder.Entity("Data.Entities.IncomingOrder", b =>
                {
                    b.HasOne("Data.Entities.Documents.OutcomingOrder", null)
                        .WithMany("OrdersIncoming")
                        .HasForeignKey("OutcomingOrderID");
                });

            modelBuilder.Entity("EmployeeGood", b =>
                {
                    b.HasOne("Data.Entities.DataHolders.Employee", null)
                        .WithMany()
                        .HasForeignKey("ResponsibleEmployeesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.DataHolders.Good", null)
                        .WithMany()
                        .HasForeignKey("ResponsibleForGoodsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Documents.OutcomingOrder", b =>
                {
                    b.Navigation("OrdersIncoming");
                });

            modelBuilder.Entity("Data.Entities.IncomingOrder", b =>
                {
                    b.Navigation("RequestedGoods");
                });
#pragma warning restore 612, 618
        }
    }
}
